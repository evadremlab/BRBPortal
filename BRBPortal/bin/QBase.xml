<?xml version="1.0"?>
<doc>
<assembly>
<name>
QBase
</name>
</assembly>
<members>
<member name="T:QSILib.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources._NEW">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ARROW10A">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ARROW10A1">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ARROW38c">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ARW01DN">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.bnFirst_Image">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.bnLast">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.bnNext">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.bnPrev">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Clear">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.DELETE">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.downarrow">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.dwnarrow">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.excel2">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.excel21">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.excel2a">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.FIND">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.help">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.help6">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.help8">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ltarrow">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.MINUS">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Open">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PASTE">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PDF">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.pen">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PEN04">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PLUS">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PRINT">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.PrintPreviewToolStripButton">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Report">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Report2">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.rtarrow">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Run">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.SAVE">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.SAVEBlue">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.Search">
<summary>
  Looks up a localized string similar to &lt;html xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;
xmlns:w=&quot;urn:schemas-microsoft-com:office:word&quot;
xmlns:st1=&quot;urn:schemas-microsoft-com:office:smarttags&quot;
xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;&gt;

&lt;head&gt;
&lt;meta http-equiv=Content-Type content=&quot;text/html; charset=windows-1252&quot;&gt;
&lt;meta name=ProgId content=Word.Document&gt;
&lt;meta name=Generator content=&quot;Microsoft Word 10&quot;&gt;
&lt;meta name=Originator content=&quot;Microsoft Word 10&quot;&gt;
&lt;link rel=File-List href=&quot;Search_files/filelist.xml&quot;&gt;
&lt;title&gt;How To Search Usi [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.SQL">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.T_utilBindingNavigatorSaveItem">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.tFPrint">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.trash2b">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.tsSaveQuery">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:QSILib.My.Resources.Resources.ViewNormal16x16">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="M:QSILib.Appl.OKToWriteToDB">
<summary> Returns False if we're working with the Live Database, and this is a Version of the Application 
 that shouldn't update Live Database(demo, alpha, beta, or qsi)</summary>
</member>
<member name="M:QSILib.Authority.isCampusWriter(System.String,System.String)">
 <summary> isCampusWriter(Campus from this record, Type of campus such as HomeLic, HomePros, HomeAcct) </summary>
</member>
<member name="P:QSILib.Windows.Forms.qGVBase.AutoSizeColumnsMode">
 <summary>
 Determines auto size mode for the visible columns.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:QSILib.Windows.Forms.qGVBase.AutoSizeRowsMode">
 <summary>
 Determines auto size mode for the visible rows.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:QSILib.Windows.Forms.qGVBase.qGVBase_CellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
 <summary> Format Nulls as "" coming from DB to Grid cell </summary>
</member>
<member name="M:QSILib.Windows.Forms.qGVBase.qGVBase_CellParsing(System.Object,System.Windows.Forms.DataGridViewCellParsingEventArgs)">
 <summary> Format "" as Nulls coming from Cell to DB </summary>
</member>
<member name="M:QSILib.Windows.Forms.qGVBase.qGVBase_DataSourceChanged(System.Object,System.EventArgs)">
 <summary> If sort column has been saved, redo the sort when DataSource is reset </summary>
</member>
<member name="M:QSILib.Windows.Forms.qTab.RefreshPages">
 <summary> For each Page in a Tab Control, if a control has a _QueryDescr and it has text or a check,
 then the page is marked dirty with a [...] to the right of the Page.Text </summary>
</member>
<member name="T:QSILib.Windows.Forms.qMultilineTextBox">
 <summary>
 Represents a custom Windows multi-line text box control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:QSILib.Windows.Forms.qTextBox._ValidateRequired">
 <summary>
 Enforces the validation rule that the Text value must not be empty.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.fpMain_Load(System.Object,System.EventArgs)">
<summary> Set Color Scheme, Set Validation Handles, Load Version dropdown and control defaults
 Note, descendant runs a Load event also - order of events is not dependable </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.QTimer1_Tick(System.Object,System.EventArgs)">
<summary> Runs at the end of the load </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.FillControlsFromVersion">
<summary> Fill all controls based on cbVersion.SelectedValue </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.SetParams(System.Collections.ArrayList@)">
<summary> Move parameters to iParams </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.SetParams(System.String,System.String)">
<summary> Add a Parameter to the parameter array (used in Report Server, probably not in Active Reports) </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.ShowStatus(System.String)">
<summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.ShowProgress(System.String)">
<summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.ShowProgress(System.String,System.Boolean)">
<summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.ShowHelp(System.String)">
<summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.BuildRptDescrStr(System.Windows.Forms.Control,System.String)">
 <summary>
 Builds a string if Report Critera Name/Values separated by aPairDelimiter and a second string of 
 Population Criteria separated by aPairDelimiter.  The two strings are concatenated, separated by ~.
 </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.GetObName">
<summary> Return the name of this form object </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.UpdateRptVersion">
<summary> Move current controls to Last Run version in tRpt and tRptCol </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.tsSaveQuery_Click(System.Object,System.EventArgs)">
<summary> Save QBE fields to database </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.tsLoadQuery_Click(System.Object,System.EventArgs)">
 <summary> Load QBE fields from database </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.btnRun_Click(System.Object,System.EventArgs)">
<summary> Run Button Clicked (there will be descendant logic for the Run button also, 
but logic order doesn't matter </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain2.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_Load(System.Object,System.EventArgs)">
<summary> Fires when form first opens </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_OnSetContext">
<summary> Local setcontext values </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_OnAfterSetContext(System.Boolean@)">
<summary> After Set Context </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_OnAfterLoadForm">
<summary> After Form Load logic - called from fBase.LoadForm </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.SetupForm">
<summary> Set up visual characteristics controls that get inherited </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_OnSetFormAttributes">
<summary> Set protected/unprotected attributes based on iIsNew </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.SetControlAttributes(System.Windows.Forms.Control)">
<summary> Set Control Attributes based on user permission, and whether in New or Edit mode </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.NavigationOK">
<summary> False if no iListNavigator or iListGV, or if Dirty and user wants to save changes </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.BindingNavigatorMoveFirstItem_Click(System.Object,System.EventArgs)">
<summary> Load form with iKey from first row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.BindingNavigatorMovePreviousItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from previous row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.BindingNavigatorMoveNextItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from next row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.BindingNavigatorMoveLastItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from last row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.btnNew_Click(System.Object,System.EventArgs)">
 <summary> New Button Clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.btnDelete_Click(System.Object,System.EventArgs)">
 <summary> Delete button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.btnSave_Click(System.Object,System.EventArgs)">
 <summary> Save button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.ReceiveMenuClick(System.String,System.String)">
 <summary> User clicked something in the menu </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_Activated(System.Object,System.EventArgs)">
 <summary> When form gets focus, refresh the menu </summary>
 <remarks>GBV 1/26/2015 - Ticket 2439 - reset the form's attributes when the user comes back to the
 form in case the lock was transferred to another form</remarks>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_OnAfterDelete">
 <summary> Apply filter after deleting a record </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.btnHelp_Click(System.Object,System.EventArgs)">
 <summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.ShowStatus(System.String)">
 <summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.ShowProgress(System.String)">
 <summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.ShowProgress(System.String,System.Boolean)">
 <summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.ShowHelp(System.String)">
 <summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.SetDirtyIndicator(System.Boolean)">
 <summary> Show Yellow rectangle to the left of the New Button if aIsDirty = True </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.feMain_FormClosing1(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary> User wants to close form </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.gvDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> User double-clicks a line in the GV.  Try to open appropriate form. </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain2.GVContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> User clicks in a GV cell.  If it is a linkcell, try to open appropriate form </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.flMain_Load(System.Object,System.EventArgs)">
<summary> Load form  (errors handled in descendant program </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.flMain_Activated(System.Object,System.EventArgs)">
<summary> Form gets focus </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetupForm">
<summary> Setup buttons, etc. </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.flMain_OnAfterSetContext(System.Boolean@)">
<summary> Add handlers for standard control events </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.HandleListControl(System.Windows.Forms.Control)">
<summary> Add handlers for standard single-entry control events </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.BtnAdd_Click(System.Object,System.EventArgs)">
<summary> Add Button - opens edit form (flMain.OpenEditForm) </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.btnQuery_Click(System.Object,System.EventArgs)">
<summary> Query/Search button Calls fBase.Query() which raises onQuery event in derived class </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.tsSaveQuery_Click(System.Object,System.EventArgs)">
<summary> Save QBE fields to database </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.tsLoadQuery_Click(System.Object,System.EventArgs)">
 <summary> Load QBE fields from database </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.tsSaveLayout_Click(System.Object,System.EventArgs)">
 <summary> Save Gridview Column order and width to database </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ReceiveMenuClick(System.String,System.String)">
<summary> User clicks something in the menu </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowStatus(System.String)">
<summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowProgress(System.String)">
<summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowProgress(System.String,System.Boolean)">
<summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowHelp(System.String)">
<summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowSave(System.Boolean)">
<summary> Show or hide Query Save button in toolbar </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.ShowFldChooser(System.Boolean)">
<summary> Show or hide Query Save button in toolbar </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.GVDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
<summary> GV double click links to Edit Form, passing iKey </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.GVContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
<summary> GV Click on link column links to Edit Form, passing iKey </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.OpenEditForm">
<summary> Open Edit Form, assumes iListGV has a selected row. </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetEditForm">
<summary> Stub for child function to set the edit form if Me._EditFormName is not specified </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.OpenEditForm(System.String)">
<summary> Open Edit Form (special case for List form - see general case in fBase) </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.QueryAfterNewRecordSave">
 <summary> 'Default behavior is to run a query after a Save of a New record.  
 If this takes too long, override this
function in the descendant and provide different behavior </summary>
 <remarks>GBV 6/12/2015 - Ticket 1245 - Changed strategy: retrieve only the new record if
 there is enough information to do so. Otherwise, call Query()</remarks>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SelectListRow(System.String)">
<summary> Synch up List when user enters a New key on Edit form that matches an existing record
This function only gets called if there is no matching function in the child </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.UpdateListRows">
<summary> Allows programmer to update the grid list with full names or descriptions </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SelectRowValues(System.String)">
<summary> Create an SQL that will collect current DB values for the changed row
 Aassumes all key fields are strings
 Override in child if these assumptions don't work </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFindVisible(System.Boolean)">
<summary> Allow descendant to turn off find area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFind2Visible(System.Boolean)">
<summary> Allow descendant to turn on find2 area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFind3Visible(System.Boolean)">
<summary> Allow descendant to turn on find3 area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFindPrompt(System.String)">
<summary> Allow descendant to set Find Prompt </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFind2Prompt(System.String)">
<summary> Allow descendant to set Find Prompt 2 </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.SetFind3Prompt(System.String)">
<summary> Allow descendant to set Find Prompt 3 </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.txtFind_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.cbColumns_SelectedIndexChanged(System.Object,System.EventArgs)">
<summary> Also execute filter every time user changes the columns to be searched </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.txtFind2_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.txtFind3_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain2.FillcbColumnsFromGVColumns(System.Windows.Forms.DataGridView)">
 <summary> Fill flMain cbColumns combobox based on the visible columns in aGV </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.fpMain_Load(System.Object,System.EventArgs)">
<summary> Set Color Scheme </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.SetParams(System.Collections.ArrayList@)">
<summary> Load local array list into iParams </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.SetParams(System.String,System.String)">
<summary> Load a Name Value pair into iParams </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.ShowStatus(System.String)">
<summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.ShowProgress(System.String)">
<summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.ShowProgress(System.String,System.Boolean)">
<summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.ShowHelp(System.String)">
<summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMain.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.fpMain_Load(System.Object,System.EventArgs)">
<summary> Set Color Scheme, Set Validation Handles, Load Version dropdown and control defaults
 Note, descendant runs a Load event also - order of events is not dependable </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.QTimer1_Tick(System.Object,System.EventArgs)">
<summary> Runs at the end of the load </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.FillControlsFromVersion">
<summary> Fill all controls based on cbVersion.SelectedValue </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.SetParams(System.Collections.ArrayList@)">
<summary> Move parameters to iParams </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.SetParams(System.String,System.String)">
<summary> Add a Parameter to the parameter array (used in Report Server, probably not in Active Reports) </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.ShowStatus(System.String)">
<summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.ShowProgress(System.String)">
<summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.ShowProgress(System.String,System.Boolean)">
<summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.ShowHelp(System.String)">
<summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.BuildRptDescrStr(System.Windows.Forms.Control,System.String)">
 <summary>
 Builds a string if Report Critera Name/Values separated by aPairDelimiter and a second string of 
 Population Criteria separated by aPairDelimiter.  The two strings are concatenated, separated by ~.
 </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.GetObName">
<summary> Return the name of this form object </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.cbVersion_SelectedValueChanged(System.Object,System.EventArgs)">
<summary> cbVersion is Changed </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.UpdateRptVersion">
<summary> Move current controls to Last Run version in tRpt and tRptCol </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.btnRun_Click(System.Object,System.EventArgs)">
<summary> Run Button Clicked (there will be descendant logic for the Run button also, 
but logic order doesn't matter </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.btnSave_Click(System.Object,System.EventArgs)">
<summary> User clicks Save button to save a version </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.btnDelete_Click(System.Object,System.EventArgs)">
<summary> After checking with user, delete current version if it isn't 'Last Run' </summary>
</member>
<member name="M:QSILib.Windows.Forms.fpMainVersion.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.fsMain.btnCancel_Click(System.Object,System.EventArgs)">
<summary> Cancel button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.#ctor(System.String,System.Int32,System.Int32,System.String)">
<summary> Pass Window Title, size of window, and path to report </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.LoadReport(System.String,System.Int32,System.Int32,System.String,System.Int32)">
<summary> Load Report </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.AddParam(System.String,System.String)">
<summary> Build up iParams array of report parameter values - these will set up report parameters
   in the load routine. </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.frMain_Load(System.Object,System.EventArgs)">
<summary> Load Report Viewer </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.Timer1_Tick(System.Object,System.EventArgs)">
<summary> Set Print Layout </summary>
</member>
<member name="M:QSILib.Windows.Forms.frMain.closetimer_Tick(System.Object,System.EventArgs)">
<summary> Close form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fuMain.fuMain_Load(System.Object,System.EventArgs)">
<summary> Load Utility progress form </summary>
</member>
<member name="E:QSILib.Windows.Forms.fBase.OnCmdButtonsVisible">
 <summary> Allow programmer to override default permissions behavior for turning off
 command buttons.  If you use this, be sure to set aActedOn to True to avoid ancestor processing </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.PassParameter(System.String,System.String)">
<summary> Allow a calling program to pass a parameter string to any child </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetContext">
<summary> Prepare Form for initial display </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.AfterSetContext">
<summary> Called at the end of SetContext </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetGVProperties(System.Collections.ArrayList@,System.String)">
<summary> Set properties for a list of GVs </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.FormSetup">
<summary> Assign tooltips based on control properties </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetColorScheme">
<summary> Set control colors, so they can be controlled from the App object </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetHandles">
<summary> Define global events for entry controls and buttons </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.HandleControl(System.Windows.Forms.Control)">
<summary> Attaches custom events to all appropriate controls in the form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.DirtyTableChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
 <summary> DirtyTable Column had something typed into it </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.AssignToolTips(System.Windows.Forms.ToolTip,System.Windows.Forms.Control)">
<summary> Assign tool tips to all controls in a control (recursive) </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.PassData(System.Object)">
 <summary> Send data to descendant for it to use </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.LoadForm">
<summary> Load Form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetMenu">
<summary> Set menu attributes based on visiblity of buttons </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.CheckForVisibleButton(System.String)">
<summary> Is this button visible on the form? </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetStartFocus">
<summary> Set focus based on whether we're in New or Edit mode.  Let programmer override focus with OnSetStartFocus,
 and finally call OnEndOfLoad </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ReceiveMenuClick(System.String,System.String)">
<summary> Stub to capture menu being clicked.  Logic should be handled in descendant </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ClientSetCmdButtonsVisible">
 <summary> This calls OnCmdButtonsVisible event and returns aActedOn </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.NewRecord(System.Boolean)">
<summary> NewRecord(CheckDirty) </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.OKToAskOKToSave">
 <summary> Before asking OK To Save, make sure btnSave is not set to Not Visible </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.NewRecord">
<summary> New Record without (or after) dirty checking '''</summary> 
</member>
<member name="M:QSILib.Windows.Forms.fBase.LoadNew">
<summary> Add empty record - we do this to BS rather than the form so that it can be saved back to the datatable </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.CheckDirty">
<summary> Generic Checkdirty looks for any changes in the dataset </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetNotDirty">
<summary> Set all entry fields not dirty </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.DeleteClicked">
<summary> Delete Key clicked - Prompt to confirm, delete, and bring up blank form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SaveClicked">
<summary> Save key </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SaveForm">
<summary> Save Form does validation, calls OnSaveForm, commits results, and sets up for further data entry </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SaveTable(System.Data.SqlClient.SqlDataAdapter,System.Data.DataTable,System.String)">
<summary> SQL Server SaveTable opens a tran if needed, and does deletes before adds.  Rollback if prob.  
 Leave to calling program to commit so multiple tables can be updated in one transaction. </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.IfxSaveTable(System.Data.Odbc.OdbcDataAdapter,System.Data.DataTable,System.String)">
<summary> Informix SaveTable opens a tran if needed, and does deletes before adds.  Rollback if prob.  
 Leave to calling program to commit so multiple tables can be updated in one transaction. 
  Always uses an ODBC connection and transaction </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SelectListRow(System.String)">
<summary> Stub for decendant routine to select a GV or UG row based on aKey </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.QueryAfterNewRecordSave">
 <summary> Stub for decendat routine to handle whether/how to Query after saving a new record </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SelectRowValues(System.String)">
<summary> Stub for descendant to specify a select that returns column names that match GridView.Columns.DataPropertyName.
 The select dataset value will be written to the GridView row </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.Query">
<summary> Calls child OnQuery event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvButton_Click(System.Object,System.EventArgs)">
<summary> Handle + amd - GridView Button Click </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.InsertRow(QSILib.Windows.Forms.qGVEdit@)">
<summary> Insert Row in qGVEdit </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.InsertRow(System.Windows.Forms.DataGridView@)">
<summary> Insert Row in GV </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RemoveSelectedGVRow(QSILib.Windows.Forms.qGVEdit@)">
<summary> Remove qGVEdit Row, after prompting the user to make sure </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RemoveSelectedGVRow(System.Windows.Forms.DataGridView@)">
<summary> Remove GV row, after prompting the user to make sure </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RemoveGVRow(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewRow,System.Int32)">
<summary>  Remove a Row from a GV </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RemoveEmptyGVRows(System.Windows.Forms.DataGridView,System.String)">
<summary> Remove GV rows where aTestField is DBNull, Nothing, or "" </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetFormAttributes">
<summary> Set Form attributes, such as protection, background color, and focus, 
 based on New/Edit and Permissions.  Calls child OnSetFormAttributes. </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GetKey(System.Windows.Forms.DataGridView@,System.Int32)">
<summary> Get Key from a specific row in a GridView
   Assumes GV.Tag or _KeyFieldsholds definition of key cell names </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ShowStatus(System.String)">
<summary> Stub for ShowStatus in descendant class </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ShowProgress(System.String)">
<summary> Stub for ShowProgress in descendant class </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ShowProgress(System.String,System.Boolean)">
<summary> Stub for ShowProgress in descendant class </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ShowHelp(System.String)">
<summary> Stub for ShowHelp in descendant class.  </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetFocusControl(System.String)">
<summary> Find a control by name, and give it focus </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetFocusCell(System.String,System.Int32,System.Int32)">
<summary> Find a GV Cell by Row and Column, and give it focus </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.AddToSQLDescr(System.String,System.String)">
<summary> Add to iSQLDescr </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GetQueryString(System.Windows.Forms.Control,System.String@)">
 <summary> Get value from control for loading into Where Clause
    Excludes checkboxes, which are not used in QBE </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.BuildQuery(System.String)">
 <summary> Add to Where Clause of aSQL based on form controls' _QueryDef property </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.isQueryControl(System.Windows.Forms.Control,System.String@)">
 <summary> If control is a query control, return true after setting aType.
   Note, checkbox has no automatic logic as a query control because of being only two states </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.BackgroundQueryComplete(System.Data.DataView)">
 <summary> Call OnBackgroundQueryComplete event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.BackgroundQueryCancelled">
 <summary> Call OnBackgroundQueryCancelled event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ClearQueryControls(System.Windows.Forms.Control,System.Boolean)">
 <summary> Clears all query controls'   </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.OpenEditFormFromList(System.String,System.String,System.Windows.Forms.DataGridView)">
 <summary> Open Edit Form From List.  Overridable. </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.StartDirtyTracking(System.Data.DataTable,System.Data.DataTable@)">
 <summary> Assign a DS Table to a WithEvents DataTable, and start checking for changes </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.MsgBoxErr(System.String,System.String,System.String)">
 <summary> Present an Error Message without logging, translation, etc. </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.MsgBoxInfo(System.String,System.String,System.String)">
 <summary> Present an Information Message without logging, translation, etc. </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.MsgBoxQuestion(System.String,System.String,System.String)">
 <summary> Present a Question Message Box </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
 <summary> Raise Event OnTab </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.find1">
 <summary> Make flMain.find1 callable from feMain </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.UpdateQueryVersion">
 <summary> Save all Single-Entry Control values to tRpt and tRptCol </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ControlToRptCol(System.Windows.Forms.Control,System.String,System.String)">
 <summary> Recursively move Single-Entry Control values to tRptCol </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ControlToQBEColumns(System.Windows.Forms.Control,System.Int32)">
 <summary> Recursively move Single-Entry Control values to tQBE_Columns </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.FillQBEDefaults(System.String,System.String)">
 <summary> Fill all controls based on cbVersion.SelectedValue </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.FillQBEDefaults_ByRecno(System.Int32)">
 <summary> Fill all controls based on selected QBE record number </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.FillControlsFromtRptColDV(System.Data.DataView)">
 <summary> Fill Controls from RptCol DV </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GetObjName">
 <summary> Return form object name, no longer than 24 characters </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.UpdateLayoutVersion">
 <summary> Save all iGVs Column order and width to tRpt and tRptCol </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetGVLayout">
 <summary> Set GV Layout from RptCol DV </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ValidateForm">
 <summary> Call OnValidateForm and handle possible errors </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.CheckRequiredFields(System.Windows.Forms.Control)">
 <summary> Recursively check all controls to make sure required fields are entered
   Checkboxes cannot be required </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GVDupeKeyCheck(System.Windows.Forms.DataGridView)">
 <summary> Returns True if good (no dupe key), False if dupe found.
 Dependencies - aGV.Tag or aGV._KeyFields must name the key columns </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.BuildKey(System.String,System.Windows.Forms.DataGridViewRow)">
 <summary> Return iKey string based on aKey, which names the fields, and a GV Row </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.EntryControl_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary> Validating Event kicks off KeyField checking and ValidateControl function </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.EntryControl_Validated(System.Object,System.EventArgs)">
 <summary> Validated Event clears any error and status messages </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvCellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
 <summary> GV Cell Formatting </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvCellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
 <summary> GV Cell Validating event kicks off ValidateGridControl function </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvCellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> GV Cell End Edit event clears any error and status messages </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetiOrigValue(System.Windows.Forms.Control)">
 <summary> Explicitly set iCurrentControlName and iOrigValue </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.EntryControl_Enter(System.Object,System.EventArgs)">
 <summary> Validated Event clears any error and status messages </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.EntryControl_Leave(System.Object,System.EventArgs)">
 <summary> Turn off help message when we leave an entry control </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RaiseDRDDOnDropdown(QSILib.qDD@,System.Boolean@)">
 <summary> Pass DR qDD OnDropDown event to descendant </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RaiseDRDDOnDropdownClosed(QSILib.qDD@)">
 <summary> Pass DR qDD OnDropDown event to descendant </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RaiseDRDDSelectedIndexChanged(QSILib.qDD@,System.Boolean@)">
 <summary> Pass DR qDD OnDropDown event to descendant </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.RaiseDRDDDoubleClick(QSILib.qDD@)">
 <summary> Pass DR qDD double-click event to descendant </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvcellenter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> Show tooltip in ShowHelp upon entering gv cell </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GoToNextField(System.Object)">
 <summary> Called By Post, sets current cell based on cell passed to it </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.GoToLastField">
 <summary> Called By Post, sets current cell to last entry field gv cell </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ValidateControl(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary> Handle single-entry control Validating event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ShowControlError(System.Object,System.String)">
 <summary> Show an error associated with a control </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.ValidateGridControl(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
 <summary> Handle GV cell validating event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.gvDataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
 <summary> Handle general GV problem not caught by OnValidateControl business rules </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.feMain_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary> Ignore validation problems if user is closing form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.IsWriter(System.String)">
 <summary> Uses CheckPermLevel in UCBase ClientAuthority to decide
 if user may write in this record and function </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.DescendantOverrideIsWriter(System.Boolean)">
 <summary> Allow descendant to have the last say in whether user is a writer </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.SetIsWriter(System.Boolean)">
 <summary> Manually set iIsWriter </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.isCampusWriter(System.String,System.String)">
 <summary> aCampus for this record.  aHomeType = "HomeLic", "HomePros" or "HomeAcct") </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.IsReader(System.String,System.String)">
<summary> Not supported in UC implementation - always returns False</summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.HasAuthority(System.String,System.String,System.Int32)">
<summary> Not supported in UC implementation - always returns False</summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.Post(System.String)">
<summary> Set post event and start timer </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.Post(System.String,System.Object)">
<summary> Set post event and a parameter, and start timer </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.PostTimer_Tick(System.Object,System.EventArgs)">
<summary> Stop timer and run the post event </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.CloseTimer_Tick(System.Object,System.EventArgs)">
<summary> Close Timer closes this form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.DirtyTimer_Tick(System.Object,System.EventArgs)">
<summary> Dirty Timer closes this form </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.Form_ResizeEnd(System.Object,System.EventArgs)">
<summary> For GVs with footers, Window resize resizes GV, so AdjustForScrollBar 
(makes Main GV bigger if footer doesn't need scroll bar </summary>
</member>
<member name="M:QSILib.Windows.Forms.fBase.MoveGVRow(System.Windows.Forms.DataGridView,System.String)">
 <summary> Move GV Row up or down </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_Load(System.Object,System.EventArgs)">
<summary> Fires when form first opens </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_OnSetContext">
<summary> Local setcontext values </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_OnAfterSetContext(System.Boolean@)">
<summary> After Set Context </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_OnAfterLoadForm">
<summary> After Form Load logic - called from fBase.LoadForm </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.SetupForm">
<summary> Set up visual characteristics controls that get inherited </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_OnSetFormAttributes">
<summary> Set protected/unprotected attributes based on iIsNew </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.SetControlAttributes(System.Windows.Forms.Control)">
<summary> Set Control Attributes based on user permission, and whether in New or Edit mode </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.NavigationOK">
<summary> False if no iListNavigator or iListGV, or if Dirty and user wants to save changes </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.BindingNavigatorMoveFirstItem_Click(System.Object,System.EventArgs)">
<summary> Load form with iKey from first row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.BindingNavigatorMovePreviousItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from previous row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.BindingNavigatorMoveNextItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from next row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.BindingNavigatorMoveLastItem_Click(System.Object,System.EventArgs)">
<summary> Load Form with iKey from last row in list </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.btnNew_Click(System.Object,System.EventArgs)">
 <summary> New Button Clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.btnDelete_Click(System.Object,System.EventArgs)">
 <summary> Delete button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.btnSave_Click(System.Object,System.EventArgs)">
 <summary> Save button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.ReceiveMenuClick(System.String,System.String)">
 <summary> User clicked something in the menu </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_Activated(System.Object,System.EventArgs)">
 <summary> When form gets focus, refresh the menu </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_OnAfterDelete">
 <summary> Apply filter after deleting a record </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.btnHelp_Click(System.Object,System.EventArgs)">
 <summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.ShowStatus(System.String)">
 <summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.ShowProgress(System.String)">
 <summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.ShowProgress(System.String,System.Boolean)">
 <summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.ShowHelp(System.String)">
 <summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.SetDirtyIndicator(System.Boolean)">
 <summary> Show Yellow rectangle to the left of the New Button if aIsDirty = True </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.feMain_FormClosing1(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary> User wants to close form </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.gvDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> User double-clicks a line in the GV.  Try to open appropriate form. </summary>
</member>
<member name="M:QSILib.Windows.Forms.feMain.GVContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary> User clicks in a GV cell.  If it is a linkcell, try to open appropriate form </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.flMain_Load(System.Object,System.EventArgs)">
<summary> Load form  (errors handled in descendant program </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.flMain_Activated(System.Object,System.EventArgs)">
<summary> Form gets focus </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetupForm">
<summary> Setup buttons, etc. </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.flMain_OnAfterSetContext(System.Boolean@)">
<summary> Add handlers for standard control events </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.HandleListControl(System.Windows.Forms.Control)">
<summary> Add handlers for standard single-entry control events </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.BtnAdd_Click(System.Object,System.EventArgs)">
<summary> Add Button - opens edit form (flMain.OpenEditForm) </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.btnQuery_Click(System.Object,System.EventArgs)">
<summary> Query/Search button Calls fBase.Query() which raises onQuery event in derived class </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.tsSaveQuery_Click(System.Object,System.EventArgs)">
<summary> Save QBE fields to database </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.tsSaveLayout_Click(System.Object,System.EventArgs)">
 <summary> Save Gridview Column order and width to database </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ReceiveMenuClick(System.String,System.String)">
<summary> User clicks something in the menu </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ShowStatus(System.String)">
<summary> Show status message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ShowProgress(System.String)">
<summary> Show Progress message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ShowProgress(System.String,System.Boolean)">
<summary> Show Progress and control cursor image </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ShowHelp(System.String)">
<summary> Show Help message </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.ShowSave(System.Boolean)">
<summary> Show or hide Query Save button in toolbar </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.GVDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
<summary> GV double click links to Edit Form, passing iKey </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.GVContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
<summary> GV Click on link column links to Edit Form, passing iKey </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.OpenEditForm">
<summary> Open Edit Form, assumes iListGV has a selected row. </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetEditForm">
<summary> Stub for child function to set the edit form if Me._EditFormName is not specified </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.OpenEditForm(System.String)">
<summary> Open Edit Form (special case for List form - see general case in fBase) </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.QueryAfterNewRecordSave">
 <summary> 'Default behavior is to run a query after a Save of a New record.  
 If this takes too long, override this
function in the descendant and provide different behavior </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SelectListRow(System.String)">
<summary> Synch up List when user enters a New key on Edit form that matches an existing record
This function only gets called if there is no matching function in the child </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.UpdateListRows">
<summary> Allows programmer to update the grid list with full names or descriptions </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SelectRowValues(System.String)">
<summary> Create an SQL that will collect current DB values for the changed row
 Aassumes all key fields are strings
 Override in child if these assumptions don't work </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFindVisible(System.Boolean)">
<summary> Allow descendant to turn off find area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFind2Visible(System.Boolean)">
<summary> Allow descendant to turn on find2 area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFind3Visible(System.Boolean)">
<summary> Allow descendant to turn on find3 area </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFindPrompt(System.String)">
<summary> Allow descendant to set Find Prompt </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFind2Prompt(System.String)">
<summary> Allow descendant to set Find Prompt 2 </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.SetFind3Prompt(System.String)">
<summary> Allow descendant to set Find Prompt 3 </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.txtFind_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.cbColumns_SelectedIndexChanged(System.Object,System.EventArgs)">
<summary> Also execute filter every time user changes the columns to be searched </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.txtFind2_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.txtFind3_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
<summary> Execute filter every time user changes the Find text </summary>
</member>
<member name="M:QSILib.Windows.Forms.flMain.FillcbColumnsFromGVColumns(System.Windows.Forms.DataGridView)">
 <summary> Fill flMain cbColumns combobox based on the visible columns in aGV </summary>
</member>
<member name="P:QSILib.qDD.MaxLength">
 <summary> Allow the programmer to set MaxLength </summary>
</member>
<member name="M:QSILib.qDD.FormatString(System.String)">
 <summary> Return formmated date or number </summary>
</member>
<member name="P:QSILib.qDD.ColumnCount">
 <summary> (Read Only) Returns the number of columns in the dropdown </summary>
</member>
<member name="P:QSILib.qDD.RowCount">
 <summary> (Read Only) Returns the total number of rows in the dropdown </summary>
</member>
<member name="M:QSILib.qDD.ClearColumns">
 <summary> Clear all columns in the dropdown </summary>
</member>
<member name="M:QSILib.qDD.GetGVRowIndexLike(System.String,System.Boolean)">
 <summary> Get first datarow from aTable that is LIKE aValue.  May return Nothing </summary>
</member>
<member name="M:QSILib.qDD.SetiGVHeightAndWidth">
 <summary> iGV.Height is set every time we prepare to open the iPopUp </summary>
</member>
<member name="M:QSILib.qDD.txtCode_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary> Format new entries based on standard _Format, where appropriate </summary>
</member>
<member name="M:QSILib.qDD.SetCursorPosition">
 <summary>
 Sets the cursor at the end of text
 </summary>
 <remarks>This is to be used only in copy/paste operations.</remarks>
</member>
<member name="M:QSILib.qRB.qRB_CheckedChanged(System.Object,System.EventArgs)">
 <summary>Set qRC Parent._DBText if this radio button is checked or unchecked </summary>
</member>
<member name="P:QSILib.qDateTimePicker.Value">
 <summary>
 Gets or sets the date/time value assigned to the control.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:QSILib.qDateTimePicker.Format">
 <summary>
 Gets or sets the format of the date and time displayed in the control.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:QSILib.qTimer">
 <summary>
 Represents a custom Windows text box control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:QSILib.qMaskedTextBox.TextMaskFormat">
 <summary>
 Indicates whether the string returned from the Text property includes literals and/or prompt characters.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:QSILib.qMaskedTextBox._ValidateRequired">
 <summary>
 Enforces the validation rule that the Text value must not be empty.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:QSILib.fProgress.#ctor(System.ComponentModel.BackgroundWorker@,System.String,System.String,System.Int32)">
<summary> Pass background worker pointer, and a description to show in the progress window.text </summary>
</member>
<member name="M:QSILib.fProgress.fProgress_Load(System.Object,System.EventArgs)">
<summary> Start timer to run logic after regular load finisheds </summary>
</member>
<member name="M:QSILib.fProgress.Timer1_Tick(System.Object,System.EventArgs)">
<summary> Check once a second to see if background worker has finished, or if iCancel has been set true </summary>
</member>
<member name="M:QSILib.fProgress.btnCancel_Click(System.Object,System.EventArgs)">
<summary> User clicks cancel button </summary>
</member>
<member name="M:QSILib.Prompt.#ctor(System.String,System.String)">
<summary> Pass window title and prompt text </summary>
</member>
<member name="M:QSILib.Prompt.btnOK_Click(System.Object,System.EventArgs)">
<summary> OK Clicked </summary>
</member>
<member name="M:QSILib.Prompt.btnCancel_Click(System.Object,System.EventArgs)">
<summary> Cancel clicked </summary>
</member>
<member name="M:QSILib.BackgroundQuery.#ctor(System.String,QSILib.Windows.Forms.fBase@,System.String,System.Int32)">
<summary> Start background Query </summary>
</member>
<member name="M:QSILib.BackgroundQuery.BW_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
<summary> Run BuildDV </summary>
</member>
<member name="M:QSILib.BackgroundQuery.BW_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
<summary> Write result to iDV so client can see it </summary>
</member>
<member name="M:QSILib.RecordLock.#ctor(System.Boolean,System.Boolean,QSILib.Windows.Forms.feMain2@)">
 <summary>Set whether this is a non-visual cron, and whether we are to Force a Lock 
 GBV - 10/23/2014 - Added aCallingForm Optional parameter - Ticket 2439</summary>
</member>
<member name="M:QSILib.RecordLock.AttemptLock(System.String@,System.String@,System.String@,System.String)">
 <summary> Try to lock aTable in aPartn, using aKey with | delimeters </summary>
</member>
<member name="M:QSILib.RecordLock.AttemptFunctionLock(System.String@,System.String)">
 <summary> Try to lock a Function (stored in lock_table) </summary>
</member>
<member name="M:QSILib.RecordLock.FillInstanceVariables(System.String,System.String,System.String)">
 <summary>Fill instance variables based on current tlock record. </summary>
</member>
<member name="M:QSILib.RecordLock.ReplaceLock">
 <summary>Replace existing lock with new one </summary>
</member>
<member name="M:QSILib.RecordLock.CheckLock">
<Summary> Check to see if we still have a record lock</Summary>
</member>
<member name="M:QSILib.RecordLock.Clear">
 <summary> Clear lock object, including removing tLock records </summary>
</member>
<member name="M:QSILib.RecordLock.UnlockRecord(System.String@,System.String@,System.String@)">
 <summary> Remove lock record from lock_table  </summary>
</member>
<member name="M:QSILib.qFunctions.IfxToSQLSyntax(System.String)">
 <summary> Given Informix SQL syntax, returns SQL Server SQL syntax </summary>
</member>
<member name="M:QSILib.qFunctions.DropDateFunction(System.String)">
 <summary> Remove Date function call from SQL call </summary>
</member>
<member name="M:QSILib.qFunctions.ReplaceIfxBracketsWithSQLSubString(System.String)">
 <summary>Recursive function to change Informix [] phrases to SQL Substring function calls </summary>
</member>
<member name="M:QSILib.qFunctions.SQLDoSQL(System.Data.SqlClient.SqlConnection,System.String,System.String@,System.Boolean,System.Boolean)">
 <summary> SQL-Server-specific DoSQL full logic </summary>
</member>
<member name="M:QSILib.qFunctions.SQLBuildDV(System.String,System.Data.SqlClient.SqlConnection,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <summary> Full SQLBuildDV.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.BuildDA(System.String,System.Data.DataSet@,System.String,System.Data.SqlClient.SqlConnection@,System.String,System.Boolean,System.String,System.String)">
 <summary> Build Data Adapter for data entry. Note aCn should be iSQLCn, so all DAs share a connection for Transaction purposes.
 Use aCommandSQL to specify a simpler SQL for Insert, Delete and Update statements than used in the original Select.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.IfxDoSQL(System.Data.Odbc.OdbcConnection,System.String,System.String@,System.Boolean,System.Boolean)">
 <summary> DoSQL.  IFX </summary>
</member>
<member name="M:QSILib.qFunctions.IfxBuildDV(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary> Create a dataview, including an possible empty row on top.  IFX </summary>
</member>
<member name="M:QSILib.qFunctions.DoSQLTranScalar(System.Collections.ArrayList,System.String@,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
 <summary>
 GBV 12/13/2012. 
 Do a transaction, given an array of SQL statements. SQL server.
 The only difference with DoSQLTran is that this function supports 
 DROP (table, index, etc.), or SP_RENAME (tables, etc), whereas
 DoSQLTran does not.
 </summary>
 <param name="aSQL">A previously populated ArrayList, with a single SQL statement per item</param>
 <param name="aErrorMessage">String variable used to return error messages</param>
 <param name="aCN">An optional SQL Connection object. If "Nothing" it creates one</param>
 <param name="aT">An optional SQL transaction object. If "Nothing" it creates one</param>
 <returns>True or False</returns>
 <remarks>There are situations where you need to call this function several times
 before committing. In that case, pass a connection and a transaction, and when
 done, commit the transaction in your code</remarks>
</member>
<member name="M:QSILib.qFunctions.DoSQLTran(System.Collections.ArrayList,System.String@,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
 <summary> Do a Transaction, given array of SQL strings. SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.IfxSaveTable2(System.Data.Odbc.OdbcDataAdapter,System.Data.DataTable,System.String,System.Data.Odbc.OdbcConnection@,System.Data.Odbc.OdbcTransaction@,System.Boolean,System.Boolean@,QSILib.Windows.Forms.fBase@)">
<summary> Informix SaveTable2 opens a tran if needed, and does deletes before adds.  Rollback if prob.  
 Leave to calling program to commit so multiple tables can be updated in one transaction. 
 This routine is called from IfxSaveTable in fBase </summary>
</member>
<member name="M:QSILib.qFunctions.SetSQLDatabase(System.String,System.String)">
 <summary>Set SQL Database - Use this to change an SQL connection string 
 from the default' Catalog=SQLPTS </summary>
</member>
<member name="M:QSILib.qFunctions.ODBCDoSQLTran(System.Collections.ArrayList,System.String@,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
 <summary> Do a Transaction, given array of SQL strings. ODBC and SQL connections/transactions can be specified, to be run based on Appl.ConnType </summary>
</member>
<member name="M:QSILib.qFunctions.ODBCDoSQLTran(System.String,System.String@,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
 <summary> Add a single SQL to an existing Transaction. ODBC connection and transaction are required. SQL connection/transaction can be specified, to be run based on Appl.ConnType </summary>
 GBV - 8/18/2011 - Added aNoRollBackIfLocked to skip rollbacks if Informix record is locked
</member>
<member name="M:QSILib.qFunctions.ODBCBuildDV(System.String,System.Boolean,System.String,System.Data.Odbc.OdbcConnection@,System.Boolean,System.Boolean)">
 <summary> Create a dataview, including an possible empty row on top.  IFX </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetNumber(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Boolean,System.Boolean)">
 <summary> Full SQLGetNumber, return 0 if null result.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.WriteTemp(System.String,System.Data.SqlClient.SqlConnection,System.Boolean,System.Boolean)">
 <summary>Write to a temporary table, based on whether ConnType = "SQL" or not </summary>
</member>
<member name="M:QSILib.qFunctions.BuildDVTemp(System.String,System.Data.SqlClient.SqlConnection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Data.Odbc.OdbcConnection)">
 <summary>BuildDV with Temporary Table - handles Ifx and SQL syntax</summary>
</member>
<member name="M:QSILib.qFunctions.BindControls(System.Windows.Forms.Control@,System.Windows.Forms.BindingSource@)">
 <summary> Bind Controls from BS </summary>
</member>
<member name="M:QSILib.qFunctions.BindControls(System.Windows.Forms.Control@,System.String,System.Windows.Forms.BindingSource@)">
 <summary> Bind Controls for a specified table </summary>
</member>
<member name="M:QSILib.qFunctions.BindControl(System.Windows.Forms.Control@,System.Windows.Forms.BindingSource@)">
 <summary> Called Recursively from BindControls, sets up default binding for q Controls 
 including Formatting as data arrives from the datatable and Parsing as data is sent back to the datatable </summary>
</member>
<member name="M:QSILib.qFunctions.CreateBinding(System.String,System.Windows.Forms.BindingSource,System.String)">
 <summary> Create a Binding Object </summary>
</member>
<member name="M:QSILib.qFunctions.HasBindingAlready(System.Windows.Forms.ControlBindingsCollection,System.String)">
 <summary> Returns true if bindingcontrolcollection has the property being queried (e.g. Text) </summary>
</member>
<member name="M:QSILib.qFunctions.DBdate2Textbox(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Manage moving date from datatable to textbox </summary>
</member>
<member name="M:QSILib.qFunctions.TextBox2DBdate(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Manage moving date from textbox to datatable </summary>
</member>
<member name="M:QSILib.qFunctions.DBNum2Textbox(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Manage moving number from datatable to textbox </summary>
</member>
<member name="M:QSILib.qFunctions.TextBox2DBNum(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Manage moving number from textbox to datatable </summary>
</member>
<member name="M:QSILib.qFunctions.DBChar2Textbox(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Manage moving character from datatable to textbox </summary>
</member>
<member name="M:QSILib.qFunctions.DB2CheckBox(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Datatable 1 or 0 to Checkbox Checked </summary>
</member>
<member name="M:QSILib.qFunctions.CheckBox2DB(System.Object,System.Windows.Forms.ConvertEventArgs)">
 <summary> Checkbox checked to Datatable 1 or 0 </summary>
</member>
<member name="M:QSILib.qFunctions.CreateFormByName(System.String,System.String,System.String,System.Object)">
 <summary> Instantiate a Form given its Home Assembly Name and its Object Name. GBV added aObject 8/29/2012 </summary>
</member>
<member name="M:QSILib.qFunctions.GetEditForm(System.String)">
 <summary> Allow any number of assemblies BHS 9/17/07 Allows multiple assemblies </summary>
</member>
<member name="M:QSILib.qFunctions.InDevEnv">
 <summary> Returns True if we're in the development environment, 
 and false if we're in runtime or debugger </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBoxSQL(System.String,System.Windows.Forms.ComboBox,System.String,System.String,System.Boolean)">
 <summary> Fill Combobox based on an SQL statement </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBoxIfx(System.String,System.Windows.Forms.ComboBox,System.String,System.String,System.Boolean)">
 <summary> Fill Combobox based on an SQL statement (Informix database) </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBoxMultiCol(QSILib.Windows.Forms.qCBMultiCol,System.String,System.Boolean,System.String,System.String,System.String,System.Data.DataView)">
 <summary> Example:  FillComboBoxMultiCol(cbOrg, "Select nk, org1, m_add2, stat From name_ad Where ven_yn = 'Y' 
 And (lname is Null or lname = '') Order By org1", False, "org1=0,m_add2=250,stat=500", "org1", "org1") </summary>
</member>
<member name="M:QSILib.qFunctions.SQLFillComboBoxMultiCol(QSILib.Windows.Forms.qCBMultiCol,System.String,System.Boolean,System.String,System.String,System.String,System.Data.DataView)">
 <summary> Example:  SQLFillComboBoxMultiCol(cbOrg, "Select nk, org1, m_add2, stat From name_ad Where ven_yn = 'Y' 
 And (lname is Null or lname = '') Order By org1", False, "org1=0,m_add2=250,stat=500", "org1", "org1") </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.Windows.Forms.ComboBox@)">
 <summary> Fill ComboBox from Name/Value Pairs string E.g. "Yes=Y,No=N" </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,QSILib.Windows.Forms.qComboBox@)">
 <summary> Fill qComboBox from Name/Value Pairs. E.g. "Yes=Y,No=N" </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.Windows.Forms.ToolStripComboBox@)">
 <summary> Fill a toolstrip ComboBox from Name/Value Pairs. E.g. "Yes=Y,No=N" </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,QSILib.Windows.Forms.qCBYesNo@)">
 <summary> Fill Yes/No Combobox from Name/Value pairs. </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.String,System.String,QSILib.Windows.Forms.qComboBox@)">
 <summary> Fill qCombobox from Name/Value pairs where you specify the delimiters </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.String,System.String,System.Windows.Forms.ComboBox@)">
 <summary> Fill ComboBox from Name/Value Pairs (full parameters) </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox2(System.String,System.String,System.String,System.Windows.Forms.ComboBox@)">
 <summary> Fill ComboBox from Name/Value Pairs (full parameters) </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.Windows.Forms.DataGridViewComboBoxColumn@)">
 <summary> Fill GV ComboBox from Name/Value Pairs (minimal parameters) </summary>
</member>
<member name="M:QSILib.qFunctions.FillComboBox(System.String,System.String,System.String,System.Windows.Forms.DataGridViewComboBoxColumn@)">
 <summary> Fill GV ComboBox from Name/Value Pairs (full parameters) </summary>
</member>
<member name="M:QSILib.qFunctions.FillDDSQL(System.String,QSILib.qDD,System.Boolean,System.String,System.Boolean,System.String,System.Boolean)">
 <summary> Fill DD based on an SQL statement.   
 Assumes column names are Name and Value </summary>
</member>
<member name="M:QSILib.qFunctions.FillDDDV(System.Data.DataView,QSILib.qDD,System.Boolean)">
 <summary> Fill DD based on a copy of a DataView (useful in DR.ItemClone).
 Assumes DV columns are Name and Value </summary>
</member>
<member name="M:QSILib.qFunctions.FillACM(System.String)">
 <summary> Fill Auto Complete List based on SQL provided. </summary>
</member>
<member name="M:QSILib.qFunctions.BuildNameValueDV(System.String,System.String,System.String,System.Boolean@)">
 <summary> Underlying function to take Name/Value Pair string and build datatable records from it </summary>
</member>
<member name="M:QSILib.qFunctions.ProgrammerErr(System.String)">
 <summary> Programmer Error </summary>
</member>
<member name="M:QSILib.qFunctions.LogError(System.String,System.Exception)">
 <summary> Called by general error processing, logs the error and sends emails </summary>
</member>
<member name="M:QSILib.qFunctions.BuildMsg(System.String,System.Exception)">
 <summary> Construct full detail error message </summary>
</member>
<member name="M:QSILib.qFunctions.TranslateErrorMsg(System.String@,System.Exception@)">
 <summary> Use this routine to change error text of standard messages </summary>
</member>
<member name="M:QSILib.qFunctions.ShowError(System.String,System.Exception,System.String)">
 <summary> Present error in a standard form </summary>
</member>
<member name="M:QSILib.qFunctions.ErrMsg(System.String,System.String)">
 <summary> Present an Error Message without logging, translation, etc. </summary>
</member>
<member name="M:QSILib.qFunctions.FindControl(System.String,System.Windows.Forms.Control,System.Windows.Forms.Control@)">
 <summary> Finds a control, given a name and context.  If found returns True, otherwise False. </summary>
</member>
<member name="M:QSILib.qFunctions.FindControl(System.String,System.Windows.Forms.Control)">
 <summary> Returns a control whose name matches the input, or an empty control if nothing matches </summary>
</member>
<member name="M:QSILib.qFunctions.ControlIsDirty(System.String,System.Windows.Forms.Control,System.String)">
 <summary> Returns true if the controlname is found within controlparent, and 
 the control's text value has changed </summary>
</member>
<member name="M:QSILib.qFunctions.ControlIsDirty(System.Windows.Forms.Control,System.String)">
 <summary> Returns true if the control's text value has changed </summary>
</member>
<member name="M:QSILib.qFunctions.isEntryControl(System.Windows.Forms.Control,System.Boolean)">
 <summary> Is this an Entry Control?  Can the user write to it? </summary>
</member>
<member name="M:QSILib.qFunctions.GetControlType(System.Windows.Forms.Control)">
 <summary> Returns str, dat or num, based on control's _DataType, or _QueryDef </summary>
</member>
<member name="M:QSILib.qFunctions.CopyToClipboard(System.Windows.Forms.Control)">
 <summary> Copy To Clipboard </summary>
</member>
<member name="M:QSILib.qFunctions.GetControlSelectedTextValues(System.Windows.Forms.Control,System.Int32@,System.Int32@)">
 <summary> Return selected text, selection start, and selection length </summary>
</member>
<member name="M:QSILib.qFunctions.GetTagColInfo(System.Object,System.String@,System.String@)">
 <summary> NO LONGER ACTIVELY USED - see ParseQueryDef and GetControlType(C).  Parses Tag field in Textbox or ComboBox to Column Name and Type.  </summary>
</member>
<member name="M:QSILib.qFunctions.ParseQueryDef(System.String,System.String@,System.String@)">
 <summary> Derive ColumnName and ColumnType from QueryDef </summary>
</member>
<member name="M:QSILib.qFunctions.SetToolTipProperties(System.Windows.Forms.ToolTip@)">
 <summary>  Set up the delays for the ToolTip. </summary>
</member>
<member name="M:QSILib.qFunctions.SetFormPosition(System.Windows.Forms.Control,System.Windows.Forms.Form,System.Windows.Forms.Form,System.Int32,System.Int32)">
 <summary> Set an absolute Form Postion to match a local Control position, but also within the parent form </summary>
</member>
<member name="M:QSILib.qFunctions.SetControlLocation(System.Windows.Forms.Control,System.Int32,System.Int32)">
 <summary> Move a control to an X,Y location </summary>
</member>
<member name="M:QSILib.qFunctions.GVSelectTopRow(System.Windows.Forms.DataGridView@)">
<summary> Select the top row of a GV, deselecting all other rows </summary>
</member>
<member name="M:QSILib.qFunctions.GVSelectTopRow(QSILib.Windows.Forms.qGVList@)">
<summary> Select the top row of a qGVList </summary>
</member>
<member name="M:QSILib.qFunctions.GetRptDescr(QSILib.Windows.Forms.fpMainVersion)">
 <summary> Return a string with report parameter descriptions (_QueryDescr > "", _QueryDef = "" And 
 some data in the control </summary>
</member>
<member name="M:QSILib.qFunctions.GetRptDescr2(System.String@,System.Windows.Forms.Control)">
 <summary> Recursive routine that examines control and all child controls to extract Report Descriptions 
 (_QueryDescr > "" And _QueryDef = "" and some data in the control) </summary>
</member>
<member name="M:QSILib.qFunctions.SaveWindowSize(System.String,System.Int32,System.Int32)">
 <summary>Save MDI size when it is resized </summary>
</member>
<member name="M:QSILib.qFunctions.SetWindowSize(System.String,System.Drawing.Size@)">
 <summary> Set MDI size if it has been saved in tRptCol </summary>
</member>
<member name="M:QSILib.qFunctions.SaveWindowLocation(System.String,System.Int32,System.Int32)">
 <summary>Save Window location when it is moved </summary>
</member>
<member name="M:QSILib.qFunctions.SetWindowLocation(System.String,System.Drawing.Point@)">
 <summary> Set Window Location if it has been saved in tRptCol </summary>
</member>
<member name="M:QSILib.qFunctions.SaveZoom(System.String,System.Single)">
 <summary> Save report zoom for this user and class </summary>
</member>
<member name="M:QSILib.qFunctions.SetZoom(System.String,System.Single@)">
 <summary> Set report zoom if it has been saved in tRptCol </summary>
</member>
<member name="M:QSILib.qFunctions.GetFilterDescr(System.String,System.Windows.Forms.ToolStripComboBox)">
 <summary> Return a clause that describes the filter.  Optional ToolStripComboBox 
 reference if filter is limited to a column </summary>
</member>
<member name="M:QSILib.qFunctions.SetListGVProperties(System.Windows.Forms.DataGridView@)">
 <summary> Set Gridview List properties </summary>
</member>
<member name="M:QSILib.qFunctions.SetEditGVProperties(System.Windows.Forms.DataGridView@)">
 <summary> Set Gridview Edit properties </summary>
</member>
<member name="M:QSILib.qFunctions.EmphasizeGVCell(System.Windows.Forms.DataGridViewRow@,System.String)">
 <summary> Change GV Cell ForeColor to the QEmphasisForeColor </summary>
</member>
<member name="M:QSILib.qFunctions.AdjustForScrollBar(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridView)">
 <summary> Adjust height of GV footer based on whether a horizontal scrollbar is showing </summary>
</member>
<member name="M:QSILib.qFunctions.FileIsWritable(System.String)">
 <summary> Return True if this user can write to the file </summary>
</member>
<member name="M:QSILib.qFunctions.WriteToFile(System.String,System.String,System.Int32)">
 <summary> Write a line to a file </summary>
</member>
<member name="M:QSILib.qFunctions.IsValidFileNameOrPath(System.String)">
 <summary> Returns False if aPath is nothing or contains invalid characters </summary>
</member>
<member name="M:QSILib.qFunctions.SetAuthConnStr(System.String)">
 <summary> Set authConnStr when app opens </summary>
</member>
<member name="M:QSILib.qFunctions.SetHelpPath(System.String)">
 <summary> Set Help Path when app opens </summary>
</member>
<member name="M:QSILib.qFunctions.CreateConnection">
 <summary> Create an SQL Connection Object.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.SetConnectionString">
 <summary> Get connect from Appl Settings </summary>
</member>
<member name="M:QSILib.qFunctions.SetDAConnection(System.Data.SqlClient.SqlDataAdapter,System.String)">
 <summary> Set Data Adapter connection from aConnStr.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.TestMatch(System.String,System.String)">
 <summary> Substitues components of aKey in &lt;keyvalue&gt; markers in aSQL.  Returns true if Select returns one or more records </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetCount(System.String,System.String,System.String)">
 <summary> Generic get count SQL.  Database depends on Appl.ConnType </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetNumber(System.String)">
 <summary> Get a number from an SQL, null result returns 0.  SQL Server.  See also IfxGetNumber. </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetNumber(System.Data.SqlClient.SqlConnection,System.String)">
 <summary> Get a number, null result returns 0.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetNumber(System.String,System.String)">
 <summary> Get a number, returning any error. SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.SQLGetString(System.String,System.Data.SqlClient.SqlConnection,System.Boolean)">
 <summary> SQL returns a trimmed string.  Return "" if null result.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.DoSQLTran(System.Collections.ArrayList,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
 <summary> Do a Transaction, given array of SQL strings. No error message string required. SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.SQLBeginTran(System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlTransaction@)">
<summary> Open a connection and assign a transaction to it </summary>
</member>
<member name="M:QSILib.qFunctions.BeginTran(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction@,System.Data.SqlClient.SqlCommand@)">
 <summary> Given a connection, this function sets aT transaction and enrolls aCmd as
   a command in that transaction.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.CommitTran(System.Data.SqlClient.SqlTransaction)">
 <summary> Commit Tran, clean up, and return any error.  SQL Server.   </summary>
</member>
<member name="M:QSILib.qFunctions.RollBackTran(System.Data.SqlClient.SqlTransaction)">
 <summary> Rollback Tran, clean up, and return any error.  SQL Server.  </summary>
</member>
<member name="M:QSILib.qFunctions.RollBackTran(System.Data.Odbc.OdbcTransaction)">
 <summary> Rollback Tran, clean up, and return any error.  SQL Server.   </summary>
</member>
<member name="M:QSILib.qFunctions.DoSQL(System.String)">
 <summary> Do an SQL Statement, no connection or errormessage given.  Database determined by Appl.ConnType.   </summary>
</member>
<member name="M:QSILib.qFunctions.DoSQL(System.String,System.String@,System.Boolean)">
 <summary> DoSQL, passing an error message reference </summary>
</member>
<member name="M:QSILib.qFunctions.SQLDoSQL(System.String,System.Boolean)">
 <summary> DoSQL explicitly for SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.SQLDoSQL(System.String,System.Data.SqlClient.SqlConnection,System.Boolean,System.Boolean)">
 <summary> DoSQL explicitly for SQL Server, specifying a connection </summary>
</member>
<member name="M:QSILib.qFunctions.DoSQL(System.Data.SqlClient.SqlConnection,System.String,System.String@,System.Boolean)">
 <summary> Full DoSQL with SQLConnection specified </summary>
</member>
<member name="M:QSILib.qFunctions.DoSP(System.String,System.String@)">
 <summary> Do a Stored Procedure command plus error message reference.  SQL Server. </summary>
</member>
<member name="M:QSILib.qFunctions.DoSP(System.Data.SqlClient.SqlConnection,System.String,System.String@)">
 <summary> Do a Stored Procedure from connection, command, and error reference.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.DoSP(System.Data.SqlClient.SqlConnection,System.String,System.Collections.ArrayList,System.Int32,System.String@)">
 <summary> Full DoSP.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.DoSP(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.String)">
 <summary> Do Stored Procedure where sender prepares object, containing parameter(s), timeout, etc.  SQL Server.  </summary>
</member>
<member name="M:QSILib.qFunctions.BuildSQLParam(System.String,System.String,System.Data.ParameterDirection,System.Int32)">
 <summary> Build SQL Parameter.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.BuildCmd(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Int32)">
 <summary> Build SQLCommand.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.TranSQL(System.String,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlConnection)">
 <summary> Add an SQL to an existing transaction.  SQL Server.  </summary>
</member>
<member name="M:QSILib.qFunctions.TranSQLScalar(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommand,System.String@)">
 <summary>
 GBV - 12/13/2012
 Execute a Command.  If there is a problem, rollback the associated Transaction. Called by DoSQLTranScalar. 
 Supports DROP and SP_RENAME statement. See DoSQLTranScalar.
 </summary>
 <param name="aT">A transaction object</param>
 <param name="aCmd">A command object</param>
 <param name="aErrorMessage">String variable to return error messages</param>
 <returns>A data object</returns>
 <remarks>Do not call this function directly. Use DoSQLTranScalar.</remarks>
</member>
<member name="M:QSILib.qFunctions.TranSQL(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommand,System.String@)">
 <summary> Execute a Command.  If there is a problem, rollback the associated Transaction  </summary>
</member>
<member name="M:QSILib.qFunctions.CheckSQLLength(System.String,System.Boolean)">
 <summary> Make sure SQL is less than 65536 characters long.  Return a revised string if needed </summary>
</member>
<member name="M:QSILib.qFunctions.RemoveMYUPPER(System.String)">
<summary> Remove MYUPPER() references </summary>
</member>
<member name="M:QSILib.qFunctions.SQLBuildDV(System.String)">
 <summary> BuildDVs with just SQL.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.SQLBuildDV(System.String,System.Boolean)">
 <summary> BuildDV with SQL and aEmptyRow.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.BuildDV(System.String,System.Boolean)">
 <summary> Create a dataview, including an possible empty row on top.  Database based on Appl.ConnType </summary>
</member>
<member name="M:QSILib.qFunctions.BuildDV(System.String,System.Boolean,System.String)">
 <summary> Create a dataview, including an possible empty row on top, with non-string type.  Database based on Appl.ConnType.  </summary>
</member>
<member name="M:QSILib.qFunctions.BuildDV(System.String,System.String)">
 <summary> Create a dataview from an SQL.  Database determined by Appl.ConnType </summary>
</member>
<member name="M:QSILib.qFunctions.SQLBuildDV(System.String,System.String)">
 <summary> Create a dataview from an SQL.  SQL Server </summary>
</member>
<member name="M:QSILib.qFunctions.AddWhereClause(System.String,System.String)">
 <summary> Returns aSQL with aWhereClause appropriately inserted </summary>
</member>
<member name="M:QSILib.qFunctions.BuildSQLInsertFromForm(System.String,System.Windows.Forms.Control)">
 <summary> Create an Insert Statement that includes values from all fields on a form </summary>
</member>
<member name="M:QSILib.qFunctions.BuildFieldValueStringsFromControl(System.Windows.Forms.Control,System.String@,System.String@)">
 <summary> Build Insert Array From controls on a form (excluding datagridviews) </summary>
</member>
<member name="M:QSILib.qFunctions.BuildSQLFromControl(System.String@,System.String@,System.String,System.String,QSILib.qFunctions.DataTypeEnum)">
 <summary> Build SQL phrase from a control </summary>
</member>
<member name="M:QSILib.qFunctions.SaveTableAndCommit(System.Data.SqlClient.SqlDataAdapter,System.Data.DataTable,System.String,System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlTransaction@,System.Boolean,System.Boolean@)">
 <summary> Creates a transaction, calls SaveTable2, and either commits or 
 rollbacks the result </summary>
</member>
<member name="M:QSILib.qFunctions.IfxSaveTableAndCommit(System.Data.Odbc.OdbcDataAdapter,System.Data.DataTable,System.String,System.Data.Odbc.OdbcConnection@,System.Data.Odbc.OdbcTransaction@,System.Boolean,System.Boolean@)">
 <summary> Creates a transaction, calls SaveTable2, and either commits or 
 rollbacks the result </summary>
</member>
<member name="M:QSILib.qFunctions.SaveTable2(System.Data.SqlClient.SqlDataAdapter,System.Data.DataTable,System.String,System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlTransaction@,System.Boolean,System.Boolean@)">
<summary> SQL Server SaveTable2 opens a tran if needed, and does deletes before adds.  Rollback if prob.  
 Leave to calling program to commit so multiple tables can be updated in one transaction.
 This routine is called from SaveTable in fBase </summary>
</member>
<member name="M:QSILib.qFunctions.SaveTable3(System.Data.SqlClient.SqlDataAdapter,System.Data.DataTable,System.String,System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlTransaction@,System.Boolean,System.Boolean@)">
 <summary>
 Identical to SaveTable2 except that the concurrency logic is enabled
 </summary>
 <remarks>GBV 5/28/2015</remarks>
</member>
<member name="M:QSILib.qFunctions.SetTableIdentity(System.String,System.String,System.Data.SqlClient.SqlRowUpdatedEventArgs,System.Data.SqlClient.SqlTransaction)">
<summary> When an SQLDataAdapter is used to save a table, this function can be called from the DA.SQLRowUpdated event
  to set the iDS table's identity value while still in the transaction. Requires an SQL Tran reference. </summary>
</member>
<member name="M:QSILib.qFunctions.GetIfxTableIdentity(System.String,System.String,System.String,System.Data.Odbc.OdbcTransaction)">

<summary> Call after Inserting a row using ODBCDoSQLTran </summary>
</member>
<member name="M:QSILib.qFunctions.GetSQLTableIdentity(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">

<summary> Call after Inserting a row using ODBCDoSQLTran </summary>
</member>
<member name="M:QSILib.qFunctions.SetODBCDatabase(System.String,System.String)">
 <summary>
 Set ODBC Database - Live and Test ODBC Drivers start with a DATABASE clause that can be modified
 by this function.  Use this to avoid putting the database in the FROM clause.
 </summary>
</member>
<member name="M:QSILib.qFunctions.ODBCBeginTran(System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction@,System.Data.Odbc.OdbcCommand@)">
 <summary> Begin Transaction.  ODBC </summary>
</member>
<member name="M:QSILib.qFunctions.ODBCTranSQL(System.Data.Odbc.OdbcTransaction,System.Data.Odbc.OdbcCommand,System.String@,System.Boolean)">
 <summary> Transaction SQL executes an SQL Statement within a transaction.  ODBC </summary>
 GBV - 8/18/2011 - Added aNoRollBackIfLocked to skip rollbacks if Informix record is locked
</member>
<member name="M:QSILib.qFunctions.ODBCRollBackTran(System.Data.Odbc.OdbcTransaction)">
 <summary> Rollback Tran, clean up, and return any error.  ODBC </summary>
</member>
<member name="M:QSILib.qFunctions.ODBCBuildDA(System.String,System.Data.DataSet@,System.String,System.Data.Odbc.OdbcConnection)">
 <summary> Build Data Adapter. Note aCn should be iODBCCn, so all DAs share a connection for Transaction purposes.  ODBC </summary>
</member>
<member name="M:QSILib.qFunctions.SetTableIdentity(System.String,System.String,System.String,System.Data.Odbc.OdbcTransaction,System.Data.Odbc.OdbcRowUpdatedEventArgs@)">
<summary> When an ODBCDataAdapter is used to save a table, this function can be called from the DA.ODBCRowUpdated event
  to set the iDS table's identity value. </summary>
</member>
<member name="M:QSILib.qFunctions.AddWhere(System.String,System.String,System.String,System.String,System.Boolean@,System.Boolean)">
 <summary> Add to SQL Where Clause </summary>
</member>
<member name="M:QSILib.qFunctions.AddFrom(System.String,System.String,System.String)">
 <summary> Add to SQL From Clause </summary>
</member>
<member name="M:QSILib.qFunctions.RowIsDeleted(System.Data.DataRow@)">
 <summary> Return True if row is not deleted or detached from the table </summary>
</member>
<member name="M:QSILib.qFunctions.WrapString(System.String,System.Int32)">
 <summary> Insert carriage returns in the first space after every aWidth characters </summary>
</member>
<member name="M:QSILib.qFunctions.HexEncode(System.String)">
 <summary> Encode a string to hex </summary>
</member>
<member name="M:QSILib.qFunctions.TrimTable(System.Data.DataTable@)">
 <summary> Right Trim character columns in a Table </summary>
</member>
<member name="M:QSILib.qFunctions.IndexOfLast(System.String,System.String)">
 <summary> Find last occurance of a character in a string </summary>
</member>
<member name="M:QSILib.qFunctions.RemoveLastChar(System.String@)">
 <summary> Remove the last character from a string, sent by reference </summary>
</member>
<member name="M:QSILib.qFunctions.RemoveLastChar(System.String@,System.Int32)">
 <summary> Remove the last characters from a string, sent by reference </summary>
</member>
<member name="M:QSILib.qFunctions.SubstituteStr(System.String@,System.String,System.String)">
 <summary> Substitute aToStr for aFromStr in aStr </summary>
</member>
<member name="M:QSILib.qFunctions.SubstituteAllStr(System.String@,System.String,System.String)">
 <summary> Substitute aToStr for aFromStr for all occurances in aStr </summary>
</member>
<member name="M:QSILib.qFunctions.RemoveStr(System.String,System.String)">
 <summary> Removes multiple instances of a string (not tested yet) </summary>
</member>
<member name="M:QSILib.qFunctions.ParseStr(System.String@,System.String,System.Int32)">
 <summary> Returns value up to aDivider, and left truncates aStr through aDivider.  aStartIndex starts searching at that position</summary>
</member>
<member name="M:QSILib.qFunctions.RightParseStr(System.String@,System.String)">
 <summary> Returns value after aDivider, and right truncates aStr starting at aDivider </summary>
</member>
<member name="M:QSILib.qFunctions.Clean(System.String)">
 <summary> Synonym for PrepareSQLSearchString, doubles up apostrophes for inclusion in SQL statements </summary>
</member>
<member name="M:QSILib.qFunctions.PrepareSQLSearchString(System.String)">
 <summary> Prepare SQL Search String by removing single apostrophes, ... </summary>
</member>
<member name="M:QSILib.qFunctions.CleanAmpersand(System.String)">
 <summary> When displaying a string, insert double ampersands so ampersands don't appear as underlines ''' </summary>
</member>
<member name="M:QSILib.qFunctions.ToDec(System.String)">
 <summary> Convert a string to a decimal.  If the string is not numeric, return 0 </summary>
</member>
<member name="M:QSILib.qFunctions.StringCompare(System.String,System.String,System.String,System.String)">
 <summary> Return True if strings from two datafields of the same type are functionally the same </summary>
</member>
<member name="M:QSILib.qFunctions.StringCompare(System.String,System.String,System.String,System.Boolean)">
 <summary> Return True if strings from two datafields of the same type are functionally the same </summary>
</member>
<member name="M:QSILib.qFunctions.StringCompare(System.String,System.String,QSILib.qFunctions.DataTypeEnum,System.Boolean)">
 <summary> Return True if strings from two datafields of the same type are functionally the same </summary>
</member>
<member name="M:QSILib.qFunctions.StringCompare(System.String,System.String)">
 <summary> Return True if strings are functionally the same (e.g. Trimmed strings, equivalent numbers, equivalent dates) </summary>
</member>
<member name="M:QSILib.qFunctions.DateCompare(System.String,System.String)">
 <summary> Compare dates.  Return true if they are functionally the same </summary>
</member>
<member name="M:QSILib.qFunctions.NumberCompare(System.String,System.String)">
 <summary> Compare numbers.  Return True only if both strings are equivalent valid numbers </summary>
</member>
<member name="M:QSILib.qFunctions.DBColToString(System.Data.DataSet,System.String,System.String,System.Int32,System.String)">
 <summary> Convert an aDS value to string (handles DRVersion 'original' and 'current' </summary>
</member>
<member name="M:QSILib.qFunctions.DBColToNum(System.Data.DataSet,System.String,System.String,System.Int32,System.String)">
 <summary> Convert a aDS value to number.  Return 0 if value is dbnull or doesn't convert to a number. </summary>
</member>
<member name="M:QSILib.qFunctions.DBColToNum(System.Object)">
 <summary> Accept a DB Value into a number.  Return 0 if DBNull or not a number.  </summary>
</member>
<member name="M:QSILib.qFunctions.NumberOrZero(System.Object)">
 <summary> Return 0 if we can't derive a number from this object </summary>
</member>
<member name="M:QSILib.qFunctions.LeftPadNumber(System.Decimal,System.String,System.Int32)">
 <summary> Left pad number with spaces so that sorting will be numeric in an alpha column.  Not sure this works with negatives. </summary>
</member>
<member name="M:QSILib.qFunctions.StripCommas(System.String@)">
 <summary> Remove commas (often from a formatted number) </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemNumber(System.Data.DataRow,System.String)">
 <summary> Return a number from a datarow item.  Return 0 if can't calculate </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemNumber(System.Windows.Forms.DataGridViewRow,System.String)">
 <summary> Return a number from a datagridviewrow item.  Return 0 if can't calculate </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemString(System.Windows.Forms.DataGridViewRow,System.String,System.Boolean)">
 <summary> Return a string from a datarow item.  Return "" if Nothing or DBNull </summary>
</member>
<member name="M:QSILib.qFunctions.RowHasNamedColumn(System.Windows.Forms.DataGridViewRow,System.String)">
 <summary> Row Has Named Column - returns true if named column exists in the row </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemDate(System.Data.DataRow,System.String)">
 <summary> Return a date from a datarow item.  Return 1/1/1900 is can't calculate </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemDate(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
 <summary> Return a date from a datarow item.  Return 1/1/1900 if we can't calculate </summary>
</member>
<member name="M:QSILib.qFunctions.GetItemDate(System.Windows.Forms.DataGridViewRow,System.String)">
 <summary> Return a date from a datagridviewrow item.  Return 1/1/1900 is can't calculate </summary>
</member>
<member name="M:QSILib.qFunctions.FormatDateString(System.String,System.String)">
 <summary> Return a date in MM/dd/yyyy format </summary>
</member>
<member name="M:QSILib.qFunctions.FormatDate(System.Object@)">
 <summary> Format date (default MM/dd/yyyy) - note this returns an object, whereas DateToStr returns a string </summary>
</member>
<member name="M:QSILib.qFunctions.FormatDate(System.Object@,System.String)">
 <summary> Format date where caller specifies the format </summary>
</member>
<member name="M:QSILib.qFunctions.FormatDate(System.DateTime@,System.String)">
 <summary> Format date where caller specifies the format </summary>
</member>
<member name="M:QSILib.qFunctions.KeyValueSearchable(System.Int32)">
 <summary> True if we can search on this keyvalue </summary>
</member>
<member name="M:QSILib.qFunctions.AddPairToList(System.String@,System.String,System.String,System.String,System.String)">
 <summary> Add a Name/Value pair to the end of a string </summary>
</member>
<member name="M:QSILib.qFunctions.TranslateKeyCode(System.Windows.Forms.KeyEventArgs)">
 <summary> Translates OEM keycode values to regular strings </summary>
</member>
<member name="M:QSILib.qFunctions.AddWatch(System.String,System.String,System.String)">
 <summary> Stub for AddWatch, which can eventually be copied over from Oakland </summary>
</member>
<member name="M:QSILib.qFunctions.GetEOM(System.DateTime)">
 <summary> This function returns an end-of-month date for the given date </summary>
</member>
<member name="M:QSILib.qFunctions.GetProcessID">
 <summary> Returns current ProcessID/Machine Name </summary>
</member>
<member name="M:QSILib.qFunctions.CedeCPUIfMemoryLow(System.Int32)">
 <summary> Let other applications run for a while if physical memory is more than half used. </summary>
</member>
<member name="M:QSILib.qFunctions.ShowControl(System.Windows.Forms.Control,System.Boolean)">
 <summary> Make a control visible or not visble </summary>
</member>
<member name="M:QSILib.qFunctions.NoWildCards(System.String)">
 <summary> Warn the user if wildcards are entered in combination with wildcards, etc. </summary>
</member>
<member name="M:QSILib.qFunctions.BuildGVFilter(System.Windows.Forms.DataGridView,System.String)">
 <summary> Build a filter based on a gridview </summary>
</member>
<member name="M:QSILib.qFunctions.BuildGVColFilter(System.String,System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewColumn,System.String)">
 <summary> BuildGVColFilter takes a starting filter string and adds a filter to an given GV Column </summary>
</member>
<member name="M:QSILib.qFunctions.RefreshGVProp(System.Windows.Forms.DataGridView)">
 <summary> Refresh default DataGridView properties </summary>
</member>
<member name="M:QSILib.qFunctions.isSingleEntryControl(System.Windows.Forms.Control)">
 <summary> Return True if this control is for entering a single value  </summary>
</member>
<member name="M:QSILib.qFunctions.isSingleQuartetEntryControl(System.Windows.Forms.Control)">
 <summary> Return True is this is a q control and is used for entering a single value </summary>
</member>
<member name="M:QSILib.qFunctions.ShowTable(System.Data.DataTable)">
<summary> ShowTable opens a window and shows the rows in a table.  Useful debugging tool to show the state of rows in a table. </summary>
</member>
<member name="M:QSILib.qFunctions.ShowTable(System.Data.DataSet)">
<summary> Show each Table in a dataset.  Usefule debugging tool for showing the state of rows in each table in a dataset </summary>
</member>
<member name="M:QSILib.qFunctions.ShowMDIStatus(System.String,System.Windows.Forms.Form)">
 <summary> Display status in bottom of MDI window ''' </summary> 
</member>
<member name="M:QSILib.qFunctions.QSIRound(System.Decimal,System.Int32)">
 <summary> Round a decimal number to "n" places </summary>
</member>
<member name="M:QSILib.qFunctions.ftpUploadText(System.String,System.String,System.String,System.String,System.String)">
 <summary>Upload a text file to ftp server</summary>
</member>
<member name="M:QSILib.qFunctions.ftpDownloadText(System.String,System.String,System.String,System.String,System.String)">
 <summary>Download a text file to ftp server</summary>
</member>
<member name="M:QSILib.qFunctions.ftpGetDirectoryDetails(System.String,System.String,System.String,System.String)">
 <summary>List files from a folder in an ftp server''' </summary>
</member>
<member name="M:QSILib.qFunctions.ftpGetTimeStamp(System.String,System.String,System.String,System.String)">
 <summary>Get Time Stamp of file in an ftp server''' </summary>
</member>
<member name="M:QSILib.qFunctions.ftpDeleteFile(System.String,System.String,System.String,System.String)">
 <summary>Delete a file from ftp server</summary>
</member>
<member name="T:QSILib.qFunctions.WFActType">
 <summary> Work Flow Activity Types</summary>
</member>
<member name="T:QSILib.qFunctions.ColumnFormatEnum">
 <summary>
 Specifies the column formats used with custom DataGridViewColumns.
 </summary>
 <remarks></remarks>
</member>
<member name="T:QSILib.qFunctions.DataTypeEnum">
 <summary>
 Specifies the data types used with custom controls.
 </summary>
 <remarks></remarks>
</member>
<member name="T:QSILib.qFunctions.FormTypeEnum">
 <summary>
 Specifies the form types used with the custom forms.
 </summary>
 <remarks></remarks>
</member>
<member name="T:QSILib.qFunctions.DataProviderEnum">
 <summary>
 Specifies the data providers used with data access.
 </summary>
 <remarks></remarks>
</member>
<member name="T:QSILib.qFunctions.MaskTypeEnum">
 <summary>
 Specifies the mask types used with custom controls.
 </summary>
 <remarks></remarks>
</member>
<member name="T:QSILib.qFunctions.PromptResponseTypeEnum">
 <summary> Specifies the prompt response types. </summary>
</member>
<member name="T:QSILib.qFunctions.TextCaseEnum">
 <summary>
 Specifies the text casing used with custom controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String)">
 Generic function that returns object variable from My.Settings
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Int32@,System.Type)">
 Specific procedure that sets input variable to type converted value from My.Settings
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Boolean@)">
 Specific procedure that sets input variable to type converted value from My.Settings
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Byte@)">
 Specific procedure that sets input variable to type converted value from My.Settings
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Char@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.DateTime@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Decimal@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Double@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Int32@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Int64@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.SByte@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Int16@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Single@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Collections.Specialized.StringCollection@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Drawing.Color@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Drawing.Font@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Drawing.Size@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Drawing.Point@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.Guid@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.TimeSpan@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.String@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.UInt32@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.UInt64@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetMySettingsValue(System.String,System.UInt16@)">
 <summary>
 Specific procedure that sets input variable to type converted value from My.Settings
 </summary>
 <param name="PropertyName"></param>
 <param name="Value"></param>
 <remarks></remarks>
</member>
<member name="M:QSILib.qFunctions.GetColByDisplayIndex(System.Windows.Forms.DataGridView,System.Int32)">
 <summary> Get reference to column by knowing its index </summary>
</member>
<member name="M:QSILib.qFunctions.ExportPath(System.String,System.String)">
 <summary> Create a unique filename in H:\PTSW\Reports to send an export to </summary>
</member>
<member name="M:QSILib.qFunctions.GetBackColor(System.Int32@)">
 <summary> Used for greenbar reports </summary>
</member>
<member name="M:QSILib.qFunctions.RunFunction(System.String)">
 <summary> Run a function given its Function Number.  Returns true if function is found and run </summary>
</member>
<member name="M:QSILib.qFunctions.GetFiscalYear(System.DateTime)">
 <summary> Get Fiscal Year from a Date object. Function returns integer</summary>
</member>
<member name="M:QSILib.qFunctions.StripJunk(System.String,System.Boolean)">
 <summary>Strip all characters that are not letters or numbers. Respect QBE symbols</summary>
</member>
<member name="M:QSILib.qFunctions.StripToNumbersOnly(System.String)">
 <summary>Strip all characters that are not numbers. </summary>
</member>
<member name="M:QSILib.qFunctions.PSS(System.String)">
<summary>Abbreviated call to PrepareSQLSearchString</summary>
</member>
<member name="M:QSILib.fError.#ctor(System.String,System.String,System.String,System.String)">
<summary> Called from ShowError in qFunctions </summary>
</member>
<member name="M:QSILib.fError.fError_Load(System.Object,System.EventArgs)">
<summary> Load form </summary>
</member>
<member name="M:QSILib.fError.btnOK_Click(System.Object,System.EventArgs)">
<summary> OK button clicked </summary>
</member>
<member name="M:QSILib.fError.btnDetails_Click(System.Object,System.EventArgs)">
<summary> Detail button clicked </summary>
</member>
<member name="F:QSILib.fShowTable.iDS">
 <summary>
 Modal form to show table information, either from a single Table reference or from a DataSet reference
 BHS 4/4/08
 </summary>
 
</member>
<member name="M:QSILib.fShowTable.fShowTable_Load(System.Object,System.EventArgs)">
 <summary> Load </summary>
</member>
<member name="M:QSILib.fShowTable.cbTables_SelectedValueChanged(System.Object,System.EventArgs)">
 <summary> Build Table ComboBox </summary>
</member>
<member name="M:QSILib.fShowTable.ShowTable(System.Data.DataTable)">
 <summary> Show Selected Table </summary>
</member>
<member name="M:QSILib.fSyntaxError.#ctor(System.String,System.String)">
<summary> Called from ShowError in qFunctions </summary>
</member>
<member name="M:QSILib.fSyntaxError.fError_Load(System.Object,System.EventArgs)">
<summary> Load form </summary>
</member>
<member name="M:QSILib.fSyntaxError.btnOK_Click(System.Object,System.EventArgs)">
<summary> OK button clicked </summary>
</member>
<member name="M:QSILib.fSyntaxError.btnDetails_Click(System.Object,System.EventArgs)">
<summary> Detail button clicked </summary>
</member>
<member name="M:QSILib.fSyntaxError.btnSearchHelp_Click(System.Object,System.EventArgs)">
<summary> Help button clicked </summary>
</member>
</members>
</doc>
